# ────────────────────────────────────────────────────────────────────────────────
# 📌 nom_de_la_commande.py — Commande simple /nom_de_la_commande et !nom_de_la_commande
# Objectif : Description courte de la commande avec interaction slash et préfixe
# Catégorie : Autre
# Accès : Tous
# Cooldown : 1 utilisation / 5 secondes / utilisateur
# ────────────────────────────────────────────────────────────────────────────────

# ────────────────────────────────────────────────────────────────────────────────
# 📦 Imports nécessaires
# ────────────────────────────────────────────────────────────────────────────────
import discord
from discord import app_commands
from discord.ext import commands
from utils.discord_utils import safe_send, safe_respond  

# ────────────────────────────────────────────────────────────────────────────────
# 🧠 Cog principal
# ────────────────────────────────────────────────────────────────────────────────
class NomDeLaCommande(commands.Cog):
    """
    Commande /nom_de_la_commande et !nom_de_la_commande — Description courte
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    # ────────────────────────────────────────────────────────────────────────────
    # 🔹 Commande SLASH
    # ────────────────────────────────────────────────────────────────────────────
    @app_commands.command(
        name="nom_de_la_commande",
        description="Description détaillée de la commande."
    )
    @app_commands.checks.cooldown(1, 5.0, key=lambda i: (i.user.id))  # ⏳ Cooldown 5s par utilisateur
    async def slash_nom_de_la_commande(self, interaction: discord.Interaction):
        """Commande slash simple qui répond avec un message."""
        try:
            await safe_respond(interaction, "✅ Réponse de la commande **slash** !")
        except app_commands.CommandOnCooldown as e:
            await safe_respond(interaction, f"⏳ Attends encore {e.retry_after:.1f}s.", ephemeral=True)
        except Exception as e:
            print(f"[ERREUR /nom_de_la_commande] {e}")
            await safe_respond(interaction, "❌ Une erreur est survenue.", ephemeral=True)

    # ────────────────────────────────────────────────────────────────────────────
    # 🔹 Commande PREFIX
    # ────────────────────────────────────────────────────────────────────────────
    @commands.command(name="nom_de_la_commande")
    @commands.cooldown(1, 5.0, commands.BucketType.user)  # ⏳ Cooldown 5s par utilisateur
    async def prefix_nom_de_la_commande(self, ctx: commands.Context):
        """Commande préfixe simple qui répond avec un message."""
        try:
            await safe_send(ctx.channel, "✅ Réponse de la commande **préfixe** !")
        except commands.CommandOnCooldown as e:
            await safe_send(ctx.channel, f"⏳ Attends encore {e.retry_after:.1f}s.")
        except Exception as e:
            print(f"[ERREUR !nom_de_la_commande] {e}")
            await safe_send(ctx.channel, "❌ Une erreur est survenue.")

# ────────────────────────────────────────────────────────────────────────────────
# 🔌 Setup du Cog
# ────────────────────────────────────────────────────────────────────────────────
async def setup(bot: commands.Bot):
    cog = NomDeLaCommande(bot)
    for command in cog.get_commands():
        if not hasattr(command, "category"):
            command.category = "Autre"
    await bot.add_cog(cog)
